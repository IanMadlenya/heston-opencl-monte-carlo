/*
  Uniform random numbers algorithm adapted from mrg32k3a described by
  http://www.iro.umontreal.ca/~lecuyer/myftp/papers/streams00.pdf

  Inverse Cumulative Standard Normal function adapted from Peter J Acklam's Algorithm 
  http://home.online.no/~pjacklam/notes/invnorm/index.html
*/

// Co-efficients for the Uniform Random Variable
#define modulus1 4294967087
#define modulus2 4294944443
#define u_denominator 4294967088.0
#define x_1_n_minus_2_coefficient 1403580
#define x_1_n_minus_3_coefficient 810728
#define x_2_n_minus_1_coefficient 527612
#define x_2_n_minus_3_coefficient 1370589  

#define pi 3.141592653589793

/* A function that takes a single seed, and fills output with count
  uniform distributions from 0 to the MAXIMUM for an INT
*/
__kernel void uniformSeeds (
    int seed,
    int count, 
   __global int* output
   )
{
   /* The rows of the x array are the state vectors for mrg32ka
     and the columns respond to (x_{-1}, x_{-2}, x_{-3}) */
   int x[2][3];
   int new_x_1, new_x_2;
   double z;
   double scalar;
 
   // Seed our random number machine with the integer representation of the seed   
   x[0][0] = x[0][1] = x[0][2] = x[1][0] = x[1][1] = x[1][2] = seed;

   for(int i = 0; i < count; i++) {
      //Calculate the new x based on the current state
      new_x_1 = (x_1_n_minus_2_coefficient * x[0][1] -
                 x_1_n_minus_3_coefficient * x[0][2]) %
                 modulus1;
      new_x_2 = (x_2_n_minus_1_coefficient * x[1][0] -
                 x_2_n_minus_3_coefficient * x[1][2]) %
                 modulus2;
      z = (new_x_1 - new_x_2) % modulus1;
 
      //Find the new uniform based on the state of z
      if (z > 0)
      {
         scalar = z / u_denominator;
      }
      else if (z < 0)
      {
         scalar = (z + modulus1) / u_denominator;
      }
      else
      {
         scalar = modulus1 / u_denominator;
      }
      //Cycle the array of x values
      x[0][2] = x[0][1];
      x[0][1] = x[0][0];
      x[0][0] = new_x_1;
      x[1][2] = x[1][1];
      x[1][1] = x[1][0];
      x[1][0] = new_x_2;
      
      output[i] = INT_MAX * scalar;
    }
}
/* A function that takes an integer seed from the global context as well as simulation parameters
  and returns a final price for the simulation
  This function uses (as in copy'n paste) the same algorithm as uniformSeeds
*/


__kernel void hestonSimulation (                                                       
   __global int* input,                                              
   __global float* output,                                 
    float initial_price,   //Starting asset price
    float rate,            //Interest Rate          
    float mu,              //Volatility mean reversion level
    float lambda,          //Volatility mean reversion strength
    float sigma,           //Volatility of Volatility
    int steps              // Number of segments in each path
   )                                        
{     
   float dt = 1.0 / steps;
   float sqrtdt = sqrt(dt);
   int i = get_global_id(0);                                      
   int x[2][3];
   float uniform;
   float normal1, normal2;   

   float u1; //storage of uniform on odd iterations
   float last_price = initial_price;
   float last_volatility = mu;

   int new_x_1, new_x_2, z;

   // Seed our random number machine with the integer representation of the seed   
   x[0][0] = x[0][1] = x[0][2] = x[1][0] = x[1][1] = x[1][2] = (int)input[i];

   for(int j = 0; j < steps * 2; j++)
   {
      //Calculate the new x based on the current state
      new_x_1 = (x_1_n_minus_2_coefficient * x[0][1] -
                 x_1_n_minus_3_coefficient * x[0][2]) %
                 modulus1;
      new_x_2 = (x_2_n_minus_1_coefficient * x[1][0] -
                 x_2_n_minus_3_coefficient * x[1][2]) %
                 modulus2;

      z = (new_x_1 - new_x_2) % modulus1;
      
      //Find the new uniform based on the state of z
      if (z > 0) 
      {
         uniform = z / u_denominator;
      } 
      else if (z < 0)
      {
         uniform = (z + modulus1) / u_denominator;
      }
      else
      {
         uniform = modulus1 / u_denominator;
      }
      
      //Cycle the array of x values
      x[0][2] = x[0][1];
      x[0][1] = x[0][0];
      x[0][0] = new_x_1;
      x[1][2] = x[1][1];
      x[1][1] = x[1][0];
      x[1][0] = new_x_2;

      //Check if we have two uniforms to turn into standard normals
      //and eventually into price movements 
      if (j > 1 && j % 2 == 0) 
      { 
        normal1 = sqrt((float) -2.0 * log(uniform)) * cos((float) (2.0*pi*u1));
        normal2 = sqrt((float) -2.0 * log(uniform)) * sin((float) (2.0*pi*u1));
        last_price = last_price * (1 + rate * dt + sqrt(last_volatility) 
                                    * sqrtdt * normal1);
        //This is not technically correct, but it does stop us from trying
        //to take the square root of a negative number on the next iteration
        last_volatility = fabs((float)(last_volatility + 
                          lambda * (mu - last_volatility) * dt + 
                          sigma * sqrt(last_volatility) * sqrtdt * normal2));

      }
      else {
         u1 = uniform;
      }
   }
   output[i] = last_price; 
}
/* Various payoff functions that can be used to determine mean price */
__kernel void straightPrice (
    __global float* buffer,
     float ignored
    )   
{
    1;
    //This is basically a null that leaves the prices where they are
    //It would be slightly faster to not execute the kernel, but
    //This method is basically for troubleshooting, and it
    //does result in slightly cleaner code on the host.
}
__kernel void vanillaCall (
    __global float* buffer,
     float strike
    )
{
   int i = get_global_id(0);                                      
   buffer[i] = fmax(0.0f, buffer[i] - strike);
}
__kernel void vanillaPut (
    __global float* buffer,
     float strike
    )
{
   int i = get_global_id(0);                                      
   buffer[i] = fmax(0.0f, strike - buffer[i]);
} 

/* Computes the mean and standard deviation and returns the results 
   in a two dimensional array [mean, stddev]
*/
__kernel void meanAndStandardDeviation(
         int count,    
        __global float* input,
        __global float* results
    )
{
    double sum, mean;
    sum = mean = 0.0;
    int i;
    for(i = 0; i < count; i++)
    {
        sum += input[i];        
    }
    results[0] = mean = sum / count;
    sum = 0.0;
    for(i = 0; i < count; i++)
    {
       sum += (input[i] - mean) * (input[i] - mean); 
    }
    results[1] = native_sqrt((float)(sum / (count - 1)));
}
